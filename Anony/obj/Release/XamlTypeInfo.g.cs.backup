//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace Anony
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::Anony.Anony_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::Anony.Anony_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::Anony.Anony_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace Anony.Anony_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::Anony.Anony_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::Anony.Anony_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[52];
            _typeNameTable[0] = "Caliburn.Micro.CaliburnApplication";
            _typeNameTable[1] = "Windows.UI.Xaml.Application";
            _typeNameTable[2] = "Anony.Primitives.FontManager";
            _typeNameTable[3] = "Object";
            _typeNameTable[4] = "Windows.UI.Color";
            _typeNameTable[5] = "System.ValueType";
            _typeNameTable[6] = "Byte";
            _typeNameTable[7] = "Anony.Controls.ViewGrid";
            _typeNameTable[8] = "Windows.UI.Xaml.Controls.Grid";
            _typeNameTable[9] = "Windows.UI.Xaml.Controls.Panel";
            _typeNameTable[10] = "Int32";
            _typeNameTable[11] = "Anony.Controls.AcEmotion";
            _typeNameTable[12] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[13] = "Anony.Controls.ArticleNoConverter";
            _typeNameTable[14] = "Anony.Controls.RichTextHelper";
            _typeNameTable[15] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[16] = "String";
            _typeNameTable[17] = "Anony.Controls.UidConverter";
            _typeNameTable[18] = "Anony.Controls.NameConverter";
            _typeNameTable[19] = "Anony.Controls.BunchPopup";
            _typeNameTable[20] = "Anony.Models.Bunch";
            _typeNameTable[21] = "Anony.Controls.FlipPage";
            _typeNameTable[22] = "Anony.Controls.ImagePopup";
            _typeNameTable[23] = "Anony.Controls.SlideView";
            _typeNameTable[24] = "Windows.UI.Xaml.Controls.ItemsControl";
            _typeNameTable[25] = "Boolean";
            _typeNameTable[26] = "Anony.Controls.HintTextBox";
            _typeNameTable[27] = "Windows.UI.Xaml.Controls.TextBox";
            _typeNameTable[28] = "Anony.Controls.SlideViewPanel";
            _typeNameTable[29] = "Caliburn.Micro.Message";
            _typeNameTable[30] = "Microsoft.Xaml.Interactivity.Interaction";
            _typeNameTable[31] = "Microsoft.Xaml.Interactivity.BehaviorCollection";
            _typeNameTable[32] = "Windows.UI.Xaml.DependencyObjectCollection";
            _typeNameTable[33] = "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior";
            _typeNameTable[34] = "Microsoft.Xaml.Interactivity.ActionCollection";
            _typeNameTable[35] = "Anony.Controls.OpenMenuFlyoutAction";
            _typeNameTable[36] = "Caliburn.Micro.Action";
            _typeNameTable[37] = "Anony.Controls.VerticalTextBlock";
            _typeNameTable[38] = "Anony.Views.CollectView";
            _typeNameTable[39] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[40] = "Anony.Controls.DetailSelector";
            _typeNameTable[41] = "Windows.UI.Xaml.Controls.DataTemplateSelector";
            _typeNameTable[42] = "Windows.UI.Xaml.DataTemplate";
            _typeNameTable[43] = "Anony.Views.DetailView";
            _typeNameTable[44] = "Anony.Views.HomeView";
            _typeNameTable[45] = "Anony.Views.ReplyView";
            _typeNameTable[46] = "Anony.Views.SearchView";
            _typeNameTable[47] = "Coding4Fun.Toolkit.Controls.ColorPicker";
            _typeNameTable[48] = "Coding4Fun.Toolkit.Controls.ColorBaseControl";
            _typeNameTable[49] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[50] = "Windows.UI.Xaml.Media.SolidColorBrush";
            _typeNameTable[51] = "Anony.Views.SettingView";

            _typeTable = new global::System.Type[52];
            _typeTable[0] = typeof(global::Caliburn.Micro.CaliburnApplication);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Application);
            _typeTable[2] = typeof(global::Anony.Primitives.FontManager);
            _typeTable[3] = typeof(global::System.Object);
            _typeTable[4] = typeof(global::Windows.UI.Color);
            _typeTable[5] = typeof(global::System.ValueType);
            _typeTable[6] = typeof(global::System.Byte);
            _typeTable[7] = typeof(global::Anony.Controls.ViewGrid);
            _typeTable[8] = typeof(global::Windows.UI.Xaml.Controls.Grid);
            _typeTable[9] = typeof(global::Windows.UI.Xaml.Controls.Panel);
            _typeTable[10] = typeof(global::System.Int32);
            _typeTable[11] = typeof(global::Anony.Controls.AcEmotion);
            _typeTable[12] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[13] = typeof(global::Anony.Controls.ArticleNoConverter);
            _typeTable[14] = typeof(global::Anony.Controls.RichTextHelper);
            _typeTable[15] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[16] = typeof(global::System.String);
            _typeTable[17] = typeof(global::Anony.Controls.UidConverter);
            _typeTable[18] = typeof(global::Anony.Controls.NameConverter);
            _typeTable[19] = typeof(global::Anony.Controls.BunchPopup);
            _typeTable[20] = typeof(global::Anony.Models.Bunch);
            _typeTable[21] = typeof(global::Anony.Controls.FlipPage);
            _typeTable[22] = typeof(global::Anony.Controls.ImagePopup);
            _typeTable[23] = typeof(global::Anony.Controls.SlideView);
            _typeTable[24] = typeof(global::Windows.UI.Xaml.Controls.ItemsControl);
            _typeTable[25] = typeof(global::System.Boolean);
            _typeTable[26] = typeof(global::Anony.Controls.HintTextBox);
            _typeTable[27] = typeof(global::Windows.UI.Xaml.Controls.TextBox);
            _typeTable[28] = typeof(global::Anony.Controls.SlideViewPanel);
            _typeTable[29] = typeof(global::Caliburn.Micro.Message);
            _typeTable[30] = typeof(global::Microsoft.Xaml.Interactivity.Interaction);
            _typeTable[31] = typeof(global::Microsoft.Xaml.Interactivity.BehaviorCollection);
            _typeTable[32] = typeof(global::Windows.UI.Xaml.DependencyObjectCollection);
            _typeTable[33] = typeof(global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior);
            _typeTable[34] = typeof(global::Microsoft.Xaml.Interactivity.ActionCollection);
            _typeTable[35] = typeof(global::Anony.Controls.OpenMenuFlyoutAction);
            _typeTable[36] = typeof(global::Caliburn.Micro.Action);
            _typeTable[37] = typeof(global::Anony.Controls.VerticalTextBlock);
            _typeTable[38] = typeof(global::Anony.Views.CollectView);
            _typeTable[39] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[40] = typeof(global::Anony.Controls.DetailSelector);
            _typeTable[41] = typeof(global::Windows.UI.Xaml.Controls.DataTemplateSelector);
            _typeTable[42] = typeof(global::Windows.UI.Xaml.DataTemplate);
            _typeTable[43] = typeof(global::Anony.Views.DetailView);
            _typeTable[44] = typeof(global::Anony.Views.HomeView);
            _typeTable[45] = typeof(global::Anony.Views.ReplyView);
            _typeTable[46] = typeof(global::Anony.Views.SearchView);
            _typeTable[47] = typeof(global::Coding4Fun.Toolkit.Controls.ColorPicker);
            _typeTable[48] = typeof(global::Coding4Fun.Toolkit.Controls.ColorBaseControl);
            _typeTable[49] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[50] = typeof(global::Windows.UI.Xaml.Media.SolidColorBrush);
            _typeTable[51] = typeof(global::Anony.Views.SettingView);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_2_FontManager() { return new global::Anony.Primitives.FontManager(); }
        private object Activate_7_ViewGrid() { return new global::Anony.Controls.ViewGrid(); }
        private object Activate_11_AcEmotion() { return new global::Anony.Controls.AcEmotion(); }
        private object Activate_13_ArticleNoConverter() { return new global::Anony.Controls.ArticleNoConverter(); }
        private object Activate_14_RichTextHelper() { return new global::Anony.Controls.RichTextHelper(); }
        private object Activate_17_UidConverter() { return new global::Anony.Controls.UidConverter(); }
        private object Activate_18_NameConverter() { return new global::Anony.Controls.NameConverter(); }
        private object Activate_19_BunchPopup() { return new global::Anony.Controls.BunchPopup(); }
        private object Activate_20_Bunch() { return new global::Anony.Models.Bunch(); }
        private object Activate_21_FlipPage() { return new global::Anony.Controls.FlipPage(); }
        private object Activate_23_SlideView() { return new global::Anony.Controls.SlideView(); }
        private object Activate_26_HintTextBox() { return new global::Anony.Controls.HintTextBox(); }
        private object Activate_28_SlideViewPanel() { return new global::Anony.Controls.SlideViewPanel(); }
        private object Activate_31_BehaviorCollection() { return new global::Microsoft.Xaml.Interactivity.BehaviorCollection(); }
        private object Activate_33_EventTriggerBehavior() { return new global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior(); }
        private object Activate_34_ActionCollection() { return new global::Microsoft.Xaml.Interactivity.ActionCollection(); }
        private object Activate_35_OpenMenuFlyoutAction() { return new global::Anony.Controls.OpenMenuFlyoutAction(); }
        private object Activate_37_VerticalTextBlock() { return new global::Anony.Controls.VerticalTextBlock(); }
        private object Activate_38_CollectView() { return new global::Anony.Views.CollectView(); }
        private object Activate_40_DetailSelector() { return new global::Anony.Controls.DetailSelector(); }
        private object Activate_43_DetailView() { return new global::Anony.Views.DetailView(); }
        private object Activate_44_HomeView() { return new global::Anony.Views.HomeView(); }
        private object Activate_45_ReplyView() { return new global::Anony.Views.ReplyView(); }
        private object Activate_46_SearchView() { return new global::Anony.Views.SearchView(); }
        private object Activate_47_ColorPicker() { return new global::Coding4Fun.Toolkit.Controls.ColorPicker(); }
        private object Activate_51_SettingView() { return new global::Anony.Views.SettingView(); }
        private void VectorAdd_31_BehaviorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DependencyObject>)instance;
            var newItem = (global::Windows.UI.Xaml.DependencyObject)item;
            collection.Add(newItem);
        }
        private void VectorAdd_34_ActionCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DependencyObject>)instance;
            var newItem = (global::Windows.UI.Xaml.DependencyObject)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::Anony.Anony_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::Anony.Anony_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Caliburn.Micro.CaliburnApplication
                userType = new global::Anony.Anony_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Application"));
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Application
                xamlType = new global::Anony.Anony_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Anony.Primitives.FontManager
                userType = new global::Anony.Anony_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_2_FontManager;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 3:   //  Object
                xamlType = new global::Anony.Anony_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  Windows.UI.Color
                userType = new global::Anony.Anony_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("A");
                userType.AddMemberName("B");
                userType.AddMemberName("G");
                userType.AddMemberName("R");
                xamlType = userType;
                break;

            case 5:   //  System.ValueType
                userType = new global::Anony.Anony_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 6:   //  Byte
                userType = new global::Anony.Anony_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 7:   //  Anony.Controls.ViewGrid
                userType = new global::Anony.Anony_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Grid"));
                userType.Activator = Activate_7_ViewGrid;
                userType.AddMemberName("Count");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 8:   //  Windows.UI.Xaml.Controls.Grid
                xamlType = new global::Anony.Anony_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 9:   //  Windows.UI.Xaml.Controls.Panel
                xamlType = new global::Anony.Anony_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 10:   //  Int32
                xamlType = new global::Anony.Anony_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 11:   //  Anony.Controls.AcEmotion
                userType = new global::Anony.Anony_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_11_AcEmotion;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 12:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::Anony.Anony_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  Anony.Controls.ArticleNoConverter
                userType = new global::Anony.Anony_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_13_ArticleNoConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 14:   //  Anony.Controls.RichTextHelper
                userType = new global::Anony.Anony_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_14_RichTextHelper;
                userType.AddMemberName("Source");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 15:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::Anony.Anony_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 16:   //  String
                xamlType = new global::Anony.Anony_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 17:   //  Anony.Controls.UidConverter
                userType = new global::Anony.Anony_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_17_UidConverter;
                userType.AddMemberName("Source");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 18:   //  Anony.Controls.NameConverter
                userType = new global::Anony.Anony_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_18_NameConverter;
                userType.AddMemberName("Source");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 19:   //  Anony.Controls.BunchPopup
                userType = new global::Anony.Anony_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_19_BunchPopup;
                userType.AddMemberName("Bunch");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 20:   //  Anony.Models.Bunch
                userType = new global::Anony.Anony_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 21:   //  Anony.Controls.FlipPage
                userType = new global::Anony.Anony_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_21_FlipPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 22:   //  Anony.Controls.ImagePopup
                userType = new global::Anony.Anony_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 23:   //  Anony.Controls.SlideView
                userType = new global::Anony.Anony_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ItemsControl"));
                userType.Activator = Activate_23_SlideView;
                userType.AddMemberName("SelectedIndex");
                userType.AddMemberName("IsSlideEnabled");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 24:   //  Windows.UI.Xaml.Controls.ItemsControl
                xamlType = new global::Anony.Anony_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 25:   //  Boolean
                xamlType = new global::Anony.Anony_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 26:   //  Anony.Controls.HintTextBox
                userType = new global::Anony.Anony_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.TextBox"));
                userType.Activator = Activate_26_HintTextBox;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 27:   //  Windows.UI.Xaml.Controls.TextBox
                xamlType = new global::Anony.Anony_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 28:   //  Anony.Controls.SlideViewPanel
                userType = new global::Anony.Anony_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Panel"));
                userType.Activator = Activate_28_SlideViewPanel;
                userType.AddMemberName("PanelIndex");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 29:   //  Caliburn.Micro.Message
                userType = new global::Anony.Anony_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Attach");
                userType.AddMemberName("Handler");
                xamlType = userType;
                break;

            case 30:   //  Microsoft.Xaml.Interactivity.Interaction
                userType = new global::Anony.Anony_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Behaviors");
                xamlType = userType;
                break;

            case 31:   //  Microsoft.Xaml.Interactivity.BehaviorCollection
                userType = new global::Anony.Anony_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObjectCollection"));
                userType.CollectionAdd = VectorAdd_31_BehaviorCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 32:   //  Windows.UI.Xaml.DependencyObjectCollection
                xamlType = new global::Anony.Anony_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 33:   //  Microsoft.Xaml.Interactions.Core.EventTriggerBehavior
                userType = new global::Anony.Anony_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_33_EventTriggerBehavior;
                userType.SetContentPropertyName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.Actions");
                userType.AddMemberName("Actions");
                userType.AddMemberName("EventName");
                userType.AddMemberName("SourceObject");
                userType.AddMemberName("AssociatedObject");
                xamlType = userType;
                break;

            case 34:   //  Microsoft.Xaml.Interactivity.ActionCollection
                userType = new global::Anony.Anony_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObjectCollection"));
                userType.CollectionAdd = VectorAdd_34_ActionCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 35:   //  Anony.Controls.OpenMenuFlyoutAction
                userType = new global::Anony.Anony_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_35_OpenMenuFlyoutAction;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 36:   //  Caliburn.Micro.Action
                userType = new global::Anony.Anony_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("TargetWithoutContext");
                userType.AddMemberName("Target");
                xamlType = userType;
                break;

            case 37:   //  Anony.Controls.VerticalTextBlock
                userType = new global::Anony.Anony_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_37_VerticalTextBlock;
                userType.AddMemberName("Text");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 38:   //  Anony.Views.CollectView
                userType = new global::Anony.Anony_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_38_CollectView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 39:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::Anony.Anony_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 40:   //  Anony.Controls.DetailSelector
                userType = new global::Anony.Anony_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.DataTemplateSelector"));
                userType.Activator = Activate_40_DetailSelector;
                userType.AddMemberName("PoTemplate");
                userType.AddMemberName("ReplyTemplate");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 41:   //  Windows.UI.Xaml.Controls.DataTemplateSelector
                xamlType = new global::Anony.Anony_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 42:   //  Windows.UI.Xaml.DataTemplate
                xamlType = new global::Anony.Anony_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 43:   //  Anony.Views.DetailView
                userType = new global::Anony.Anony_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_43_DetailView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 44:   //  Anony.Views.HomeView
                userType = new global::Anony.Anony_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_44_HomeView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 45:   //  Anony.Views.ReplyView
                userType = new global::Anony.Anony_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_45_ReplyView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 46:   //  Anony.Views.SearchView
                userType = new global::Anony.Anony_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_46_SearchView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 47:   //  Coding4Fun.Toolkit.Controls.ColorPicker
                userType = new global::Anony.Anony_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Coding4Fun.Toolkit.Controls.ColorBaseControl"));
                userType.Activator = Activate_47_ColorPicker;
                userType.AddMemberName("Thumb");
                xamlType = userType;
                break;

            case 48:   //  Coding4Fun.Toolkit.Controls.ColorBaseControl
                userType = new global::Anony.Anony_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.AddMemberName("Color");
                userType.AddMemberName("SolidColorBrush");
                xamlType = userType;
                break;

            case 49:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::Anony.Anony_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 50:   //  Windows.UI.Xaml.Media.SolidColorBrush
                xamlType = new global::Anony.Anony_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 51:   //  Anony.Views.SettingView
                userType = new global::Anony.Anony_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_51_SettingView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Caliburn.Micro.XamlMetadataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Coding4Fun.Toolkit.Controls.Coding4Fun_Toolkit_Controls__WP81__XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_Color_A(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.A;
        }
        private void set_0_Color_A(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.A = (global::System.Byte)Value;
        }
        private object get_1_Color_B(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.B;
        }
        private void set_1_Color_B(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.B = (global::System.Byte)Value;
        }
        private object get_2_Color_G(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.G;
        }
        private void set_2_Color_G(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.G = (global::System.Byte)Value;
        }
        private object get_3_Color_R(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.R;
        }
        private void set_3_Color_R(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.R = (global::System.Byte)Value;
        }
        private object get_4_ViewGrid_Count(object instance)
        {
            var that = (global::Anony.Controls.ViewGrid)instance;
            return that.Count;
        }
        private void set_4_ViewGrid_Count(object instance, object Value)
        {
            var that = (global::Anony.Controls.ViewGrid)instance;
            that.Count = (global::System.Int32)Value;
        }
        private object get_5_RichTextHelper_Source(object instance)
        {
            return global::Anony.Controls.RichTextHelper.GetSource((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_5_RichTextHelper_Source(object instance, object Value)
        {
            global::Anony.Controls.RichTextHelper.SetSource((global::Windows.UI.Xaml.DependencyObject)instance, (global::System.String)Value);
        }
        private object get_8_BunchPopup_Bunch(object instance)
        {
            var that = (global::Anony.Controls.BunchPopup)instance;
            return that.Bunch;
        }
        private void set_8_BunchPopup_Bunch(object instance, object Value)
        {
            var that = (global::Anony.Controls.BunchPopup)instance;
            that.Bunch = (global::Anony.Models.Bunch)Value;
        }
        private object get_9_SlideView_SelectedIndex(object instance)
        {
            var that = (global::Anony.Controls.SlideView)instance;
            return that.SelectedIndex;
        }
        private void set_9_SlideView_SelectedIndex(object instance, object Value)
        {
            var that = (global::Anony.Controls.SlideView)instance;
            that.SelectedIndex = (global::System.Int32)Value;
        }
        private object get_10_SlideView_IsSlideEnabled(object instance)
        {
            var that = (global::Anony.Controls.SlideView)instance;
            return that.IsSlideEnabled;
        }
        private void set_10_SlideView_IsSlideEnabled(object instance, object Value)
        {
            var that = (global::Anony.Controls.SlideView)instance;
            that.IsSlideEnabled = (global::System.Boolean)Value;
        }
        private object get_11_SlideViewPanel_PanelIndex(object instance)
        {
            return global::Anony.Controls.SlideViewPanel.GetPanelIndex((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_11_SlideViewPanel_PanelIndex(object instance, object Value)
        {
            global::Anony.Controls.SlideViewPanel.SetPanelIndex((global::Windows.UI.Xaml.DependencyObject)instance, (global::System.Int32)Value);
        }
        private object get_12_Message_Attach(object instance)
        {
            return global::Caliburn.Micro.Message.GetAttach((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_12_Message_Attach(object instance, object Value)
        {
            global::Caliburn.Micro.Message.SetAttach((global::Windows.UI.Xaml.DependencyObject)instance, (global::System.String)Value);
        }
        private object get_13_Message_Handler(object instance)
        {
            return global::Caliburn.Micro.Message.GetHandler((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_13_Message_Handler(object instance, object Value)
        {
            global::Caliburn.Micro.Message.SetHandler((global::Windows.UI.Xaml.DependencyObject)instance, (global::System.Object)Value);
        }
        private object get_14_Interaction_Behaviors(object instance)
        {
            return global::Microsoft.Xaml.Interactivity.Interaction.GetBehaviors((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_14_Interaction_Behaviors(object instance, object Value)
        {
            global::Microsoft.Xaml.Interactivity.Interaction.SetBehaviors((global::Windows.UI.Xaml.DependencyObject)instance, (global::Microsoft.Xaml.Interactivity.BehaviorCollection)Value);
        }
        private object get_15_EventTriggerBehavior_Actions(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.Actions;
        }
        private object get_16_EventTriggerBehavior_EventName(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.EventName;
        }
        private void set_16_EventTriggerBehavior_EventName(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            that.EventName = (global::System.String)Value;
        }
        private object get_17_EventTriggerBehavior_SourceObject(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.SourceObject;
        }
        private void set_17_EventTriggerBehavior_SourceObject(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            that.SourceObject = (global::System.Object)Value;
        }
        private object get_18_EventTriggerBehavior_AssociatedObject(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.AssociatedObject;
        }
        private object get_19_Action_TargetWithoutContext(object instance)
        {
            return global::Caliburn.Micro.Action.GetTargetWithoutContext((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_19_Action_TargetWithoutContext(object instance, object Value)
        {
            global::Caliburn.Micro.Action.SetTargetWithoutContext((global::Windows.UI.Xaml.DependencyObject)instance, (global::System.Object)Value);
        }
        private object get_20_Action_Target(object instance)
        {
            return global::Caliburn.Micro.Action.GetTarget((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_20_Action_Target(object instance, object Value)
        {
            global::Caliburn.Micro.Action.SetTarget((global::Windows.UI.Xaml.DependencyObject)instance, (global::System.Object)Value);
        }
        private object get_21_VerticalTextBlock_Text(object instance)
        {
            return global::Anony.Controls.VerticalTextBlock.GetText((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_21_VerticalTextBlock_Text(object instance, object Value)
        {
            global::Anony.Controls.VerticalTextBlock.SetText((global::Windows.UI.Xaml.DependencyObject)instance, (global::System.String)Value);
        }
        private object get_22_DetailSelector_PoTemplate(object instance)
        {
            var that = (global::Anony.Controls.DetailSelector)instance;
            return that.PoTemplate;
        }
        private void set_22_DetailSelector_PoTemplate(object instance, object Value)
        {
            var that = (global::Anony.Controls.DetailSelector)instance;
            that.PoTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_23_DetailSelector_ReplyTemplate(object instance)
        {
            var that = (global::Anony.Controls.DetailSelector)instance;
            return that.ReplyTemplate;
        }
        private void set_23_DetailSelector_ReplyTemplate(object instance, object Value)
        {
            var that = (global::Anony.Controls.DetailSelector)instance;
            that.ReplyTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_24_ColorPicker_Thumb(object instance)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.ColorPicker)instance;
            return that.Thumb;
        }
        private void set_24_ColorPicker_Thumb(object instance, object Value)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.ColorPicker)instance;
            that.Thumb = (global::System.Object)Value;
        }
        private object get_25_ColorBaseControl_Color(object instance)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.ColorBaseControl)instance;
            return that.Color;
        }
        private void set_25_ColorBaseControl_Color(object instance, object Value)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.ColorBaseControl)instance;
            that.Color = (global::Windows.UI.Color)Value;
        }
        private object get_26_ColorBaseControl_SolidColorBrush(object instance)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.ColorBaseControl)instance;
            return that.SolidColorBrush;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::Anony.Anony_XamlTypeInfo.XamlMember xamlMember = null;
            global::Anony.Anony_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Windows.UI.Color.A":
                userType = (global::Anony.Anony_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::Anony.Anony_XamlTypeInfo.XamlMember(this, "A", "Byte");
                xamlMember.Getter = get_0_Color_A;
                xamlMember.Setter = set_0_Color_A;
                break;
            case "Windows.UI.Color.B":
                userType = (global::Anony.Anony_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::Anony.Anony_XamlTypeInfo.XamlMember(this, "B", "Byte");
                xamlMember.Getter = get_1_Color_B;
                xamlMember.Setter = set_1_Color_B;
                break;
            case "Windows.UI.Color.G":
                userType = (global::Anony.Anony_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::Anony.Anony_XamlTypeInfo.XamlMember(this, "G", "Byte");
                xamlMember.Getter = get_2_Color_G;
                xamlMember.Setter = set_2_Color_G;
                break;
            case "Windows.UI.Color.R":
                userType = (global::Anony.Anony_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::Anony.Anony_XamlTypeInfo.XamlMember(this, "R", "Byte");
                xamlMember.Getter = get_3_Color_R;
                xamlMember.Setter = set_3_Color_R;
                break;
            case "Anony.Controls.ViewGrid.Count":
                userType = (global::Anony.Anony_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Anony.Controls.ViewGrid");
                xamlMember = new global::Anony.Anony_XamlTypeInfo.XamlMember(this, "Count", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_ViewGrid_Count;
                xamlMember.Setter = set_4_ViewGrid_Count;
                break;
            case "Anony.Controls.RichTextHelper.Source":
                userType = (global::Anony.Anony_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Anony.Controls.RichTextHelper");
                xamlMember = new global::Anony.Anony_XamlTypeInfo.XamlMember(this, "Source", "String");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_5_RichTextHelper_Source;
                xamlMember.Setter = set_5_RichTextHelper_Source;
                break;
            case "Anony.Controls.UidConverter.Source":
                userType = (global::Anony.Anony_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Anony.Controls.UidConverter");
                xamlMember = new global::Anony.Anony_XamlTypeInfo.XamlMember(this, "Source", "Object");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                break;
            case "Anony.Controls.NameConverter.Source":
                userType = (global::Anony.Anony_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Anony.Controls.NameConverter");
                xamlMember = new global::Anony.Anony_XamlTypeInfo.XamlMember(this, "Source", "Object");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                break;
            case "Anony.Controls.BunchPopup.Bunch":
                userType = (global::Anony.Anony_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Anony.Controls.BunchPopup");
                xamlMember = new global::Anony.Anony_XamlTypeInfo.XamlMember(this, "Bunch", "Anony.Models.Bunch");
                xamlMember.Getter = get_8_BunchPopup_Bunch;
                xamlMember.Setter = set_8_BunchPopup_Bunch;
                break;
            case "Anony.Controls.SlideView.SelectedIndex":
                userType = (global::Anony.Anony_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Anony.Controls.SlideView");
                xamlMember = new global::Anony.Anony_XamlTypeInfo.XamlMember(this, "SelectedIndex", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_SlideView_SelectedIndex;
                xamlMember.Setter = set_9_SlideView_SelectedIndex;
                break;
            case "Anony.Controls.SlideView.IsSlideEnabled":
                userType = (global::Anony.Anony_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Anony.Controls.SlideView");
                xamlMember = new global::Anony.Anony_XamlTypeInfo.XamlMember(this, "IsSlideEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_SlideView_IsSlideEnabled;
                xamlMember.Setter = set_10_SlideView_IsSlideEnabled;
                break;
            case "Anony.Controls.SlideViewPanel.PanelIndex":
                userType = (global::Anony.Anony_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Anony.Controls.SlideViewPanel");
                xamlMember = new global::Anony.Anony_XamlTypeInfo.XamlMember(this, "PanelIndex", "Int32");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_11_SlideViewPanel_PanelIndex;
                xamlMember.Setter = set_11_SlideViewPanel_PanelIndex;
                break;
            case "Caliburn.Micro.Message.Attach":
                userType = (global::Anony.Anony_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Caliburn.Micro.Message");
                xamlMember = new global::Anony.Anony_XamlTypeInfo.XamlMember(this, "Attach", "String");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_12_Message_Attach;
                xamlMember.Setter = set_12_Message_Attach;
                break;
            case "Caliburn.Micro.Message.Handler":
                userType = (global::Anony.Anony_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Caliburn.Micro.Message");
                xamlMember = new global::Anony.Anony_XamlTypeInfo.XamlMember(this, "Handler", "Object");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_13_Message_Handler;
                xamlMember.Setter = set_13_Message_Handler;
                break;
            case "Microsoft.Xaml.Interactivity.Interaction.Behaviors":
                userType = (global::Anony.Anony_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactivity.Interaction");
                xamlMember = new global::Anony.Anony_XamlTypeInfo.XamlMember(this, "Behaviors", "Microsoft.Xaml.Interactivity.BehaviorCollection");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_14_Interaction_Behaviors;
                xamlMember.Setter = set_14_Interaction_Behaviors;
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.Actions":
                userType = (global::Anony.Anony_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::Anony.Anony_XamlTypeInfo.XamlMember(this, "Actions", "Microsoft.Xaml.Interactivity.ActionCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_EventTriggerBehavior_Actions;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.EventName":
                userType = (global::Anony.Anony_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::Anony.Anony_XamlTypeInfo.XamlMember(this, "EventName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_EventTriggerBehavior_EventName;
                xamlMember.Setter = set_16_EventTriggerBehavior_EventName;
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.SourceObject":
                userType = (global::Anony.Anony_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::Anony.Anony_XamlTypeInfo.XamlMember(this, "SourceObject", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_EventTriggerBehavior_SourceObject;
                xamlMember.Setter = set_17_EventTriggerBehavior_SourceObject;
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.AssociatedObject":
                userType = (global::Anony.Anony_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::Anony.Anony_XamlTypeInfo.XamlMember(this, "AssociatedObject", "Windows.UI.Xaml.DependencyObject");
                xamlMember.Getter = get_18_EventTriggerBehavior_AssociatedObject;
                xamlMember.SetIsReadOnly();
                break;
            case "Caliburn.Micro.Action.TargetWithoutContext":
                userType = (global::Anony.Anony_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Caliburn.Micro.Action");
                xamlMember = new global::Anony.Anony_XamlTypeInfo.XamlMember(this, "TargetWithoutContext", "Object");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_19_Action_TargetWithoutContext;
                xamlMember.Setter = set_19_Action_TargetWithoutContext;
                break;
            case "Caliburn.Micro.Action.Target":
                userType = (global::Anony.Anony_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Caliburn.Micro.Action");
                xamlMember = new global::Anony.Anony_XamlTypeInfo.XamlMember(this, "Target", "Object");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_20_Action_Target;
                xamlMember.Setter = set_20_Action_Target;
                break;
            case "Anony.Controls.VerticalTextBlock.Text":
                userType = (global::Anony.Anony_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Anony.Controls.VerticalTextBlock");
                xamlMember = new global::Anony.Anony_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_21_VerticalTextBlock_Text;
                xamlMember.Setter = set_21_VerticalTextBlock_Text;
                break;
            case "Anony.Controls.DetailSelector.PoTemplate":
                userType = (global::Anony.Anony_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Anony.Controls.DetailSelector");
                xamlMember = new global::Anony.Anony_XamlTypeInfo.XamlMember(this, "PoTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_22_DetailSelector_PoTemplate;
                xamlMember.Setter = set_22_DetailSelector_PoTemplate;
                break;
            case "Anony.Controls.DetailSelector.ReplyTemplate":
                userType = (global::Anony.Anony_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Anony.Controls.DetailSelector");
                xamlMember = new global::Anony.Anony_XamlTypeInfo.XamlMember(this, "ReplyTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_23_DetailSelector_ReplyTemplate;
                xamlMember.Setter = set_23_DetailSelector_ReplyTemplate;
                break;
            case "Coding4Fun.Toolkit.Controls.ColorPicker.Thumb":
                userType = (global::Anony.Anony_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Coding4Fun.Toolkit.Controls.ColorPicker");
                xamlMember = new global::Anony.Anony_XamlTypeInfo.XamlMember(this, "Thumb", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_ColorPicker_Thumb;
                xamlMember.Setter = set_24_ColorPicker_Thumb;
                break;
            case "Coding4Fun.Toolkit.Controls.ColorBaseControl.Color":
                userType = (global::Anony.Anony_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Coding4Fun.Toolkit.Controls.ColorBaseControl");
                xamlMember = new global::Anony.Anony_XamlTypeInfo.XamlMember(this, "Color", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_ColorBaseControl_Color;
                xamlMember.Setter = set_25_ColorBaseControl_Color;
                break;
            case "Coding4Fun.Toolkit.Controls.ColorBaseControl.SolidColorBrush":
                userType = (global::Anony.Anony_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Coding4Fun.Toolkit.Controls.ColorBaseControl");
                xamlMember = new global::Anony.Anony_XamlTypeInfo.XamlMember(this, "SolidColorBrush", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_ColorBaseControl_SolidColorBrush;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::Anony.Anony_XamlTypeInfo.XamlSystemBaseType
    {
        global::Anony.Anony_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::Anony.Anony_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::Anony.Anony_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::Anony.Anony_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


